<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Manage Bookings</title>
  <link rel="stylesheet" href="/css/manageBookings.css" />
  <style>
    .top-controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
      margin: 20px;
    }

    .add-booking-btn {
      background-color: #2d89ef;
      color: white;
      padding: 10px 20px;
      border: none;
      font-weight: 600;
      font-size: 14px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .add-booking-btn:hover {
      background-color: #1b61c1;
    }

    .filters {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }

    .filters select {
      padding: 8px;
      border-radius: 5px;
      border: 1px solid #ccc;
    }
 .modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100vh;        /* Use full viewport height */
  overflow-y: auto;     /* Allow vertical scroll if content is tall */
  background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
  background-color: #fff;
  margin: 40px auto;    /* Add some margin top/bottom */
  padding: 30px;
  border-radius: 10px;
  width: 90%;
  max-width: 800px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);

  /* Optional: limit max-height and scroll inside modal-content */
  max-height: 90vh;     /* max height 90% viewport */
  overflow-y: auto;     /* scroll inside if content too tall */
}

  .modal-content h3 {
    margin-bottom: 20px;
    text-align: center;
    font-size: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
    margin-bottom: 15px;
  }

  .form-group label {
    font-weight: 500;
    font-size: 0.95rem;
  }

  .form-group input,
  .form-group select {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 0.95rem;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    gap: 20px;
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 20px;
  }

  .form-actions button {
    padding: 10px 20px;
    border: none;
    background-color: #007bff;
    color: #fff;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .form-actions button:hover {
    background-color: #0056b3;
  }

  .form-actions button:last-child {
    background-color: #dc3545;
  }

  .form-actions button:last-child:hover {
    background-color: #b02a37;
  }

  .modal-content input:required:invalid,
  .modal-content select:required:invalid {
    border-color: #e74c3c;
  }

  .footer {
  margin-top: 40px;
  padding: 20px;
  background-color: #0f83ff;
  color: #fff;
  text-align: center;
  font-size: 14px;
  border-top: 1px solid #e0e0e0;
}

@media (max-width: 768px) {
  .footer {
    padding: 15px;
    font-size: 13px;
  }
}
  </style>
</head>
<body>

  <!-- Top Controls -->
  <div class="top-controls">
    <button class="add-booking-btn" id="openAddModalBtn">+ Add New Booking</button>

    <div class="filters">
      <select id="bookingTypeFilter">
        <option value="all">All Booking Types</option>
        <option value="Single">Single</option>
        <option value="Double">Double</option>
      </select>

      <select id="tableLocationFilter">
        <option value="all">All Table Locations</option>
        <option value="VIP">VIP</option>
        <option value="Regular">Regular</option>
        <option value="Outdoor">Outdoor</option>
      </select>

      <select id="statusFilter">
        <option value="all">All Status</option>
        <option value="Pending">Pending</option>
        <option value="Completed">Completed</option>
        <option value="Cancelled">Cancelled</option>
      </select>
    </div>
  </div>

  <!-- Table -->
  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>Full Name</th>
          <th>Email</th>
          <th>Phone Number</th>
          <th>Booking Type</th>
          <th>Table Location</th>
          <th>Date</th>
          <th>Time</th>
          <th>Until</th>
          <th>Guests</th>
          <th>Status</th>
          <th>Payment Reference</th>
          <th>Payment Status</th>
          <th>Amount Paid</th>
          <th>Created At</th>
          <th>Updated At</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="bookingTableBody">
        <% bookings.forEach(function(booking) { %>
          <tr data-id="<%= booking.id %>">
            <td><%= booking.Customer_FirstName %> <%= booking.Customer_LastName %></td>
            <td><%= booking.Email %></td>
            <td><%= booking.Phone_Number %></td>
            <td><%= booking.Booking_Type %></td>
            <td><%= booking.Table_Location %></td>
            <td><%= booking.Date.toLocaleDateString() %></td>
            <td><%= booking.Time %></td>
            <td><%= booking.Until %></td>
            <td><%= booking.guests %></td>
            <td><%= booking.status %></td>
            <td><%= booking.payment_reference %></td>
            <td><%= booking.payment_status %></td>
            <td><%= booking.amount_paid %></td>
            <td><%= new Date(booking.created_at).toDateString() %></td>
            <td><%= new Date(booking.updated_at).toDateString() %></td>
            <td>
              <div class="action-buttons">
                <button class="updatebtn">Update</button>
                <button class="deletebtn">Delete</button>
              </div>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <div class="pagination"></div>

 <!-- Update Booking Modal -->
<div class="modal" id="updateModal">
  <div class="modal-content">
    <h3>Update Booking</h3>

    <div class="form-group">
      <label for="updateName">Full Name</label>
      <input type="text" id="updateName" placeholder="Full Name" disabled />
    </div>

    <div class="form-group">
      <label for="updateStatus">Booking Status</label>
      <select id="updateStatus">
        <option value="Pending">Pending</option>
        <option value="Completed">Completed</option>
        <option value="Cancelled">Cancelled</option>
      </select>
    </div>

    <div class="form-actions">
      <button id="saveUpdateBtn">Save</button>
      <button id="closeModalBtn">Cancel</button>
    </div>
  </div>
</div>

<!-- Add New Booking Modal -->
<div class="modal" id="addModal">
  <div class="modal-content">
    <h3>Add New Booking</h3>

    <div class="form-grid">
      <div class="form-group">
        <label for="firstName">First Name *</label>
        <input type="text" id="firstName" placeholder="Enter first name" required />
      </div>

      <div class="form-group">
        <label for="lastName">Last Name *</label>
        <input type="text" id="lastName" placeholder="Enter last name" required />
      </div>

      <div class="form-group">
        <label for="email">Email *</label>
        <input type="email" id="email" placeholder="Enter email address" required />
      </div>

      <div class="form-group">
        <label for="phone">Phone Number *</label>
        <input type="text" id="phone" placeholder="Enter phone number" required />
      </div>

      <div class="form-group">
        <label for="bookingType">Booking Type</label>
        <select id="bookingType">
          <option value="Single">Single</option>
          <option value="Group">Double</option>
        </select>
      </div>

      <div class="form-group">
        <label for="tableLocation">Table Location</label>
        <select id="tableLocation">
          <option value="VIP">VIP</option>
          <option value="Regular">Regular</option>
          <option value="Outdoor">Outdoor</option>
        </select>
      </div>

      <div class="form-group">
        <label for="date">Booking Date *</label>
        <input type="date" id="date" required />
      </div>

      <div class="form-group">
        <label for="time">Start Time *</label>
        <input type="time" id="time" required />
      </div>

      <div class="form-group">
        <label for="until">End Time</label>
        <input type="time" id="until" />
      </div>

      <div class="form-group">
        <label for="guests">Number of Guests</label>
        <input type="number" id="guests" placeholder="e.g. 2" min="1" />
      </div>

      <div class="form-group">
        <label for="amount">Amount Paid</label>
        <input type="number" id="amount" placeholder="e.g. 5000" />
      </div>

      <div class="form-group">
        <label for="payment_reference">Payment Reference</label>
        <input type="text" id="payment_reference" placeholder="e.g. TRX12345" />
      </div>

      <div class="form-group">
        <label for="payment_status">Payment Status</label>
        <select id="payment_status">
          <option value="Pending">Pending</option>
          <option value="Paid">Paid</option>
          <option value="Failed">Failed</option>
        </select>
      </div>

      <div class="form-group">
        <label for="status">Booking Status</label>
        <select id="status">
          <option value="Pending">Pending</option>
          <option value="Completed">Completed</option>
          <option value="Cancelled">Cancelled</option>
        </select>
      </div>
    </div>

    <div class="form-actions">
      <button id="saveAddBtn">Submit</button>
      <button onclick="document.getElementById('addModal').style.display='none'">Cancel</button>
    </div>
  </div>
</div>
    <footer class="footer">
  <p>&copy; <%= new Date().getFullYear() %> Tomi's Kitchen. All rights reserved.</p>
</footer>

<script>
  const rowsPerPage = 5;
  let currentPage = 1;
  let currentRow = null;
  let currentRowId = null;

  function getFilteredRows() {
    const bookingType = document.getElementById('bookingTypeFilter').value.toLowerCase();
    const tableLocation = document.getElementById('tableLocationFilter').value.toLowerCase();
    const status = document.getElementById('statusFilter').value.toLowerCase();

    const allRows = Array.from(document.querySelectorAll('#bookingTableBody tr'));

    return allRows.filter(row => {
      const typeText = row.children[3].textContent.toLowerCase();
      const locationText = row.children[4].textContent.toLowerCase();
      const statusText = row.children[9].textContent.toLowerCase();

      return (bookingType === 'all' || typeText === bookingType)
          && (tableLocation === 'all' || locationText === tableLocation)
          && (status === 'all' || statusText === status);
    });
  }

  function renderTable() {
    const allRows = Array.from(document.querySelectorAll('#bookingTableBody tr'));
    allRows.forEach(row => row.style.display = 'none');

    const filtered = getFilteredRows();
    const totalPages = Math.ceil(filtered.length / rowsPerPage);
    if (currentPage > totalPages) currentPage = totalPages || 1;

    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;

    filtered.slice(start, end).forEach(row => row.style.display = '');

    renderPagination(totalPages);
  }

  function renderPagination(totalPages) {
    const pagination = document.querySelector('.pagination');
    pagination.innerHTML = '';

    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement('button');
      btn.textContent = i;
      if (i === currentPage) btn.classList.add('active');
      btn.addEventListener('click', () => {
        currentPage = i;
        renderTable();
      });
      pagination.appendChild(btn);
    }
  }

  async function saveUpdate() {
    const status = document.getElementById('updateStatus').value;
    if (!currentRowId) return;

    try {
      const res = await fetch(`/admin/bookings/${currentRowId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status })
      });

      const data = await res.json();
      if (data.success) {
        currentRow.children[9].textContent = status;
        closeModal();
        renderTable();
      } else {
        alert(data.message || 'Failed to update booking');
      }
    } catch (err) {
      console.error(err);
      alert('Error updating booking');
    }
  }

  function closeModal() {
    document.getElementById('updateModal').style.display = 'none';
    currentRow = null;
    currentRowId = null;
  }

  async function saveNewBooking() {
    const booking = {
      firstname: document.getElementById('firstName').value,
      lastname: document.getElementById('lastName').value,
      email: document.getElementById('email').value,
      phone: document.getElementById('phone').value,
      booking_type: document.getElementById('bookingType').value,
      table_location: document.getElementById('tableLocation').value,
      date: document.getElementById('date').value,
      time: document.getElementById('time').value,
      until: document.getElementById('until').value,
      guests: parseInt(document.getElementById('guests').value),
      status: document.getElementById('status').value,
      payment_reference: document.getElementById('payment_reference').value,
      payment_status: document.getElementById('payment_status').value,
      amount_paid: document.getElementById('amount').value,
    };

    try {
      const res = await fetch('/admin/bookings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(booking)
      });

      const data = await res.json();
      if (data.success) {
        alert(data.message);
        location.reload();
      } else {
        alert(data.message || 'Failed to add booking');
      }
    } catch (err) {
      console.error(err);
      alert('Error adding booking');
    }
  }

  function attachEventListeners() {
    document.getElementById('bookingTypeFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });

    document.getElementById('tableLocationFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });

    document.getElementById('statusFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });

    document.querySelector('#bookingTableBody').addEventListener('click', async e => {
      const row = e.target.closest('tr');
      const id = row?.dataset?.id;
      if (!id) return;

      if (e.target.classList.contains('updatebtn')) {
        currentRow = row;
        currentRowId = id;
        document.getElementById('updateName').value = row.children[0].textContent;
        document.getElementById('updateStatus').value = row.children[9].textContent;
        document.getElementById('updateModal').style.display = 'flex';
      }

      if (e.target.classList.contains('deletebtn')) {
        if (confirm('Are you sure you want to delete this booking?')) {
          try {
            const res = await fetch(`/admin/bookings/${id}`, { method: 'DELETE' });
            const data = await res.json();
            if (data.success) {
              row.remove();
              renderTable();
            } else {
              alert(data.message || 'Failed to delete booking');
            }
          } catch (err) {
            console.error(err);
            alert('Error deleting booking');
          }
        }
      }
    });

    document.getElementById('saveUpdateBtn').addEventListener('click', saveUpdate);
    document.getElementById('closeModalBtn').addEventListener('click', closeModal);

    document.getElementById('openAddModalBtn').addEventListener('click', () => {
      document.getElementById('addModal').style.display = 'flex';
    });

    document.getElementById('saveAddBtn').addEventListener('click', saveNewBooking);
  }

  document.addEventListener('DOMContentLoaded', () => {
    attachEventListeners();
    renderTable();
  });
</script>

</body>
</html>
