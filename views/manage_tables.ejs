<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Manage Tables</title>
  <link rel="stylesheet" href="/css/manageTable.css" />
  <style>
    .modal {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0, 0, 0, 0.6);
  justify-content: center;
  align-items: center;
  padding: 20px;
  z-index: 999;
}

.modal-content {
  background: #fff;
  padding: 25px 20px;
  border-radius: 10px;
  width: 100%;
  max-width: 400px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.modal-content h3 {
  margin-top: 0;
  text-align: center;
}

.modal-content input,
.modal-content select {
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 6px;
  width: 100%;
}

.modal-content button {
  padding: 10px;
  font-size: 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background 0.3s ease;
}

#saveAddBtn {
  background-color: #0f83ff;
  color: white;
}

#closeAddModalBtn {
  background-color: #ccc;
}

.modal-content button:hover {
  opacity: 0.9;
}

@media (max-width: 480px) {
  .modal-content {
    padding: 20px 15px;
    gap: 12px;
  }

  .modal-content input,
  .modal-content select,
  .modal-content button {
    font-size: 14px;
  }
}
.controls-wrapper {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  gap: 10px;
  margin: 20px;
}

.filters {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.controls-wrapper select {
  padding: 8px 10px;
  border-radius: 5px;
  font-size: 14px;
}

#openAddModalBtn {
  padding: 10px 15px;
  background-color: #0f83ff;
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  cursor: pointer;
  transition: background-color 0.3s;
}

#openAddModalBtn:hover {
  background-color: #0c6ed6;
}

@media (max-width: 600px) {
  .controls-wrapper {
    flex-direction: column;
    align-items: stretch;
  }

  .filters {
    flex-direction: column;
  }

  #openAddModalBtn {
    width: 100%;
  }
}
.footer {
  margin-top: 40px;
  padding: 20px;
  background-color: #0f83ff;
  color: #fff;
  text-align: center;
  font-size: 14px;
  border-top: 1px solid #e0e0e0;
}

@media (max-width: 768px) {
  .footer {
    padding: 15px;
    font-size: 13px;
  }
}
  </style>
</head>
<body>


<div class="controls-wrapper">
  <div class="filters">
    <select id="bookingTypeFilter">
      <option value="all">All Table Types</option>
      <option value="Dine-In">Dine-In</option>
      <option value="Takeaway">Takeaway</option>
    </select>

    <select id="tableLocationFilter">
      <option value="all">All Table Locations</option>
      <option value="VIP">VIP</option>
      <option value="Regular">Regular</option>
      <option value="Outdoor">Outdoor</option>
    </select>

    <select id="statusFilter">
      <option value="all">All Status</option>
      <option value="Available">Available</option>
      <option value="Reserved">Reserved</option>
      <option value="Occupied">Occupied</option>
      <option value="Disabled">Disabled</option>
    </select>
  </div>

  <button id="openAddModalBtn">Add Table</button>
</div>


  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>Table Number</th>
          <th>Table Location</th>
          <th>Capacity</th>
          <th>Status</th>
          <th>Created At</th>
          <th>Updated At</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="bookingTableBody">
        <% tables.forEach(function(table) { %>
          <tr data-id="<%= table.table_id %>">
            <td><%= table.table_number %></td>
            <td><%= table.location %></td>
            <td><%= table.capacity %></td>
            <td><%= table.status %></td>
            <td><%= table.created_at.toDateString() %></td>
            <td><%= table.updated_at.toDateString() %></td>
            <td>
              <div class="action-buttons">
                <button class="updatebtn">Update</button>
                <button class="deletebtn">Delete</button>
              </div>
            </td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>

  <div class="pagination"></div>

  <!-- Update Modal -->
  <div class="modal" id="updateModal">
    <div class="modal-content">
      <h3>Update Table</h3>
      <input type="text" id="updateName" disabled />
      <select id="updateStatus">
        <option value="Available">Available</option>
        <option value="Reserved">Reserved</option>
        <option value="Occupied">Occupied</option>
        <option value="Disabled">Disabled</option>
      </select>
      <button id="saveUpdateBtn">Save</button>
      <button id="closeModalBtn">Cancel</button>
    </div>
  </div>

 <!-- Add Table Modal -->
<div class="modal" id="addModal">
  <div class="modal-content">
    <h3>Add Table</h3>
    <input type="text" id="addTableNumber" placeholder="Table Number" required />
    <select id="addLocation" required>
      <option value="VIP">VIP</option>
      <option value="Regular">Regular</option>
      <option value="Outdoor">Outdoor</option>
    </select>
    <input type="number" id="addCapacity" placeholder="Capacity" required min="1" />
    <select id="addStatus" required>
      <option value="Available">Available</option>
      <option value="Reserved">Reserved</option>
      <option value="Occupied">Occupied</option>
      <option value="Disabled">Disabled</option>
    </select>
    <button id="saveAddBtn">Add Table</button>
    <button id="closeAddModalBtn">Cancel</button>
  </div>
</div>

  <footer class="footer">
  <p>&copy; <%= new Date().getFullYear() %> Tomi's Kitchen. All rights reserved.</p>
</footer>

<script>
  const rowsPerPage = 5;
  let currentPage = 1;
  let currentRow = null;
  let currentRowId = null;

  function getFilteredRows() {
    const bookingType = document.getElementById('bookingTypeFilter').value.toLowerCase();
    const tableLocation = document.getElementById('tableLocationFilter').value.toLowerCase();
    const status = document.getElementById('statusFilter').value.toLowerCase();
    const allRows = Array.from(document.querySelectorAll('#bookingTableBody tr'));
    return allRows.filter(row => {
      const typeText = row.children[0].textContent.toLowerCase();
      const locationText = row.children[1].textContent.toLowerCase();
      const statusText = row.children[3].textContent.toLowerCase();
      const matchesType = bookingType === 'all' || typeText === bookingType;
      const matchesLocation = tableLocation === 'all' || locationText === tableLocation;
      const matchesStatus = status === 'all' || statusText === status;
      return matchesType && matchesLocation && matchesStatus;
    });
  }

  function renderTable() {
    const allRows = Array.from(document.querySelectorAll('#bookingTableBody tr'));
    allRows.forEach(row => row.style.display = 'none');
    const filtered = getFilteredRows();
    const totalPages = Math.ceil(filtered.length / rowsPerPage);
    if (currentPage > totalPages) currentPage = totalPages || 1;
    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    filtered.slice(start, end).forEach(row => row.style.display = '');
    renderPagination(totalPages);
  }

  function renderPagination(totalPages) {
    const pagination = document.querySelector('.pagination');
    pagination.innerHTML = '';
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement('button');
      btn.textContent = i;
      if (i === currentPage) btn.classList.add('active');
      btn.addEventListener('click', () => {
        currentPage = i;
        renderTable();
      });
      pagination.appendChild(btn);
    }
  }

  async function saveUpdate() {
    const status = document.getElementById('updateStatus').value;
    if (!currentRowId) return;
    try {
      const res = await fetch(`/admin/table/${currentRowId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status })
      });
      const data = await res.json();
      if (data.success) {
        currentRow.children[3].textContent = status;
        closeModal();
        renderTable();
      } else {
        alert(data.message || 'Failed to update table');
      }
    } catch (err) {
      console.error(err);
      alert('Error updating table');
    }
  }

  async function saveAdd() {
    const table_number = document.getElementById('addTableNumber').value.trim();
    const location = document.getElementById('addLocation').value;
    const capacity = document.getElementById('addCapacity').value;
    const status = document.getElementById('addStatus').value;
    if (!table_number || !capacity) return alert('Please fill in all required fields.');
    try {
      const res = await fetch('/admin/table', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ table_number, location, capacity, status })
      });
      const data = await res.json();
      if (data.success && data.table) {
        const table = data.table;
        const newRow = document.createElement('tr');
        newRow.setAttribute('data-id', table.table_id);
        newRow.innerHTML = `
          <td>${table.table_number}</td>
          <td>${table.location}</td>
          <td>${table.capacity}</td>
          <td>${table.status}</td>
          <td>${new Date(table.created_at).toDateString()}</td>
          <td>${new Date(table.updated_at).toDateString()}</td>
          <td>
            <div class="action-buttons">
              <button class="updatebtn">Update</button>
              <button class="deletebtn">Delete</button>
            </div>
          </td>`;
        document.getElementById('bookingTableBody').appendChild(newRow);
        closeAddModal();
        renderTable();
      } else {
        alert(data.message || 'Failed to add table');
      }
    } catch (err) {
      console.error(err);
      alert('Error adding table');
    }
  }

  function closeModal() {
    document.getElementById('updateModal').style.display = 'none';
    currentRow = null;
    currentRowId = null;
  }

  function closeAddModal() {
    document.getElementById('addModal').style.display = 'none';
    document.getElementById('addTableNumber').value = '';
    document.getElementById('addLocation').value = 'VIP';
    document.getElementById('addCapacity').value = '';
    document.getElementById('addStatus').value = 'Available';
  }

  function attachEventListeners() {
    document.getElementById('bookingTypeFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });
    document.getElementById('tableLocationFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });
    document.getElementById('statusFilter').addEventListener('change', () => {
      currentPage = 1;
      renderTable();
    });

    document.getElementById('openAddModalBtn').addEventListener('click', () => {
      document.getElementById('addModal').style.display = 'flex';
    });
    document.getElementById('closeAddModalBtn').addEventListener('click', closeAddModal);
    document.getElementById('saveAddBtn').addEventListener('click', saveAdd);

    document.querySelector('#bookingTableBody').addEventListener('click', async e => {
      const row = e.target.closest('tr');
      const id = row?.dataset?.id;
      if (!id) return;

      if (e.target.classList.contains('updatebtn')) {
        currentRow = row;
        currentRowId = id;
        document.getElementById('updateName').value = row.children[0].textContent;
        document.getElementById('updateStatus').value = row.children[3].textContent;
        document.getElementById('updateModal').style.display = 'flex';
      }

      if (e.target.classList.contains('deletebtn')) {
        if (confirm('Are you sure you want to delete this table?')) {
          try {
            const res = await fetch(`/admin/table/${id}`, { method: 'DELETE' });
            const data = await res.json();
            if (data.success) {
              row.remove();
              renderTable();
            } else {
              alert(data.message || 'Failed to delete table');
            }
          } catch (err) {
            console.error(err);
            alert('Error deleting table');
          }
        }
      }
    });

    document.getElementById('saveUpdateBtn').addEventListener('click', saveUpdate);
    document.getElementById('closeModalBtn').addEventListener('click', closeModal);
  }

  document.addEventListener('DOMContentLoaded', () => {
    attachEventListeners();
    renderTable();
  });
</script>
</body>
</html>
